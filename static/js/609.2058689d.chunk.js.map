{"version":3,"file":"static/js/609.2058689d.chunk.js","mappings":"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","sources":["common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { notification } from \"antd\";\r\nimport axios from \"axios\";\r\n\r\nexport const useForm = (validate: any) => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        email: '',\r\n        message: ''\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    const [shouldSubmit, setShouldSubmit] = useState(false);\r\n\r\n    const openNotificationWithIcon = () => {\r\n        notification[\"success\"]({\r\n            message: \"Success\",\r\n            description: \"Your message has been sent!\",\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        setErrors(validate(values));\r\n\r\n        const webhookURL = \"https://api.strello.co/api/user/contact-us\";\r\n\r\n        if (Object.keys(values).length === 3) {\r\n            axios.post(webhookURL, {\r\n                attachments: [\r\n                    {\r\n                        color: \"#2eb886\",\r\n                        author_name: values.name,\r\n                        title: values.email,\r\n                        title_link: `mailto:${values.email}`,\r\n                        text: values.message\r\n                    }\r\n                ]\r\n            }, {\r\n                withCredentials: false\r\n            }).then(() => {\r\n                setShouldSubmit(true);\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && shouldSubmit) {\r\n            setValues({\r\n                name: '',\r\n                email: '',\r\n                message: ''\r\n            });\r\n            openNotificationWithIcon();\r\n        }\r\n    }, [errors, shouldSubmit]);\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        event.persist();\r\n        setValues((values) => ({\r\n            ...values,\r\n            [event.target.name]: event.target.value,\r\n        }));\r\n        setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\r\n    };\r\n\r\n    return {\r\n        handleChange,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n    };\r\n};\r\n","import { validateProps } from \"../../common/types\";\r\n\r\nexport default function validate(values: validateProps) {\r\n  let errors = {} as validateProps;\r\n\r\n  if (!values.name) {\r\n    errors.name = \"Name is required\";\r\n  }\r\n  if (!values.email) {\r\n    errors.email = \"Email address is required\";\r\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    errors.email = \"Email address is invalid\";\r\n  }\r\n  if (!values.message) {\r\n    errors.message = \"Message is required\";\r\n  }\r\n  return errors;\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin-top: 1.5rem;\r\n`;\r\n\r\nexport const Container = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 700px;\r\n`;\r\n\r\nexport const TextWrapper = styled(\"div\")`\r\n  border-radius: 3rem;\r\n  max-width: 400px;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, TextWrapper, Content } from \"./styles\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  content: string;\r\n  t: any;\r\n}\r\n\r\nconst Block = ({ title, content, t }: Props) => {\r\n  return (\r\n    <Container>\r\n      <h6>{t(title)}</h6>\r\n      <TextWrapper>\r\n        <Content>{t(content)}</Content>\r\n      </TextWrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Block);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n`;\r\n\r\nexport const StyledInput = styled(\"input\")`\r\n  font-size: 0.875rem;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled(\"div\")`\r\n  display: inline-block;\r\n  width: 100%;\r\n  padding: 10px 5px;\r\n  margin-bottom: -0.625rem;\r\n`;\r\n\r\nexport const StyledTextArea = styled(\"textarea\")`\r\n  resize: none;\r\n  font-size: 0.875rem;\r\n  height: 185px;\r\n`;\r\n\r\nexport const Label = styled(\"label\")`\r\n  display: block;\r\n  padding-bottom: 10px;\r\n  text-transform: capitalize;\r\n`;\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { Container, StyledInput } from \"./styles\";\r\nimport { Label } from \"../TextArea/styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <Container>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledInput\r\n      placeholder={t(placeholder)}\r\n      name={name}\r\n      id={name}\r\n      onChange={onChange}\r\n    />\r\n  </Container>\r\n);\r\n\r\nexport default withTranslation()(Input);\r\n","import { withTranslation } from \"react-i18next\";\r\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\r\nimport { InputProps } from \"../types\";\r\n\r\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\r\n  <StyledContainer>\r\n    <Label htmlFor={name}>{t(name)}</Label>\r\n    <StyledTextArea\r\n      placeholder={t(placeholder)}\r\n      id={name}\r\n      name={name}\r\n      onChange={onChange}\r\n    />\r\n  </StyledContainer>\r\n);\r\n\r\nexport default withTranslation()(TextArea);\r\n","import styled from \"styled-components\";\r\n\r\nexport const ContactContainer = styled(\"div\")`\r\n  padding: 5rem 0;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 3rem 0;\r\n  }\r\n`;\r\n\r\nexport const FormGroup = styled(\"form\")`\r\n  width: 100%;\r\n  max-width: 520px;\r\n\r\n  @media only screen and (max-width: 1045px) {\r\n    max-width: 100%;\r\n    margin-top: 2rem;\r\n  }\r\n`;\r\n\r\nexport const Span = styled(\"span\")<any>`\r\n  display: block;\r\n  font-weight: 600;\r\n  color: rgb(255, 130, 92);\r\n  height: 0.775rem;\r\n  padding: 0 0.675rem;\r\n`;\r\n\r\nexport const ButtonContainer = styled(\"div\")`\r\n  text-align: end;\r\n  position: relative;\r\n\r\n  @media only screen and (max-width: 414px) {\r\n    padding-top: 0.75rem;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { withTranslation } from \"react-i18next\";\r\nimport { Slide, Zoom } from \"react-awesome-reveal\";\r\nimport { ContactProps, ValidationTypeProps } from \"./types\";\r\nimport { useForm } from \"../../common/utils/useForm\";\r\nimport validate from \"../../common/utils/validationRules\";\r\nimport { Button } from \"../../common/Button\";\r\nimport Block from \"../Block\";\r\nimport Input from \"../../common/Input\";\r\nimport TextArea from \"../../common/TextArea\";\r\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\r\n\r\nconst Contact = ({ title, content, id, t }: ContactProps) => {\r\n  const { values, errors, handleChange, handleSubmit } = useForm(\r\n    validate\r\n  ) as any;\r\n\r\n  const ValidationType = ({ type }: ValidationTypeProps) => {\r\n    const ErrorMessage = errors[type];\r\n    return (\r\n      <Zoom direction=\"left\">\r\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\r\n      </Zoom>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContactContainer id={id}>\r\n      <Row justify=\"space-between\" align=\"middle\">\r\n        <Col lg={12} md={11} sm={24} xs={24}>\r\n          <Slide direction=\"left\">\r\n            <Block title={title} content={content} />\r\n          </Slide>\r\n        </Col>\r\n        <Col lg={12} md={12} sm={24} xs={24}>\r\n          <Slide direction=\"right\">\r\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  placeholder=\"Your Name\"\r\n                  value={values.name || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"name\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"email\"\r\n                  placeholder=\"Your Email\"\r\n                  value={values.email || \"\"}\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"email\" />\r\n              </Col>\r\n              <Col span={24}>\r\n                <TextArea\r\n                  placeholder=\"Your Message\"\r\n                  value={values.message || \"\"}\r\n                  name=\"message\"\r\n                  onChange={handleChange}\r\n                />\r\n                <ValidationType type=\"message\" />\r\n              </Col>\r\n              <ButtonContainer>\r\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\r\n              </ButtonContainer>\r\n            </FormGroup>\r\n          </Slide>\r\n        </Col>\r\n      </Row>\r\n    </ContactContainer>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(Contact);\r\n"],"names":["useForm","validate","useState","name","email","message","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","description","handleChange","event","persist","target","value","handleSubmit","preventDefault","axios","attachments","color","author_name","title","title_link","text","withCredentials","then","test","Content","styled","Container","TextWrapper","withTranslation","content","t","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","ValidationType","type","ErrorMessage","direction","erros","justify","align","lg","md","sm","xs","autoComplete","onSubmit","span","Button"],"sourceRoot":""}